/* MANAGED-BY-SYSTEM-BUILDER                                    */

/*
** ADSP-BF548 linker description file generated on Aug 24, 2007 at 15:20:53.
**
** Copyright (C) 2000-2007 Analog Devices Inc., All Rights Reserved.
**
** This file is generated automatically based upon the options selected
** in the LDF Wizard. Changes to the LDF configuration should be made by
** changing the appropriate options rather than editing this file.
**
** Configuration:-
**     crt_doj:                                .\Debug\Power_On_Self_Test_basiccrt.doj
**     processor:                              ADSP-BF548
**     si_revision:                            automatic
**     using_cplusplus:                        false
**     mem_init:                               false
**     use_vdk:                                false
**     use_eh:                                 true
**     use_argv:                               false
**     running_from_internal_memory:           true
**     user_heap_src_file:                     C:\Build Tools\nightly_build\cvsStage\_5.0ExportBlackfinReGen\Examples\Blackfin\Examples\ADSP-BF548 EZ-KIT Lite\Power_On_Self_Test\Power_On_Self_Test_heaptab.c
**     libraries_use_stdlib:                   true
**     libraries_use_fileio_libs:              false
**     libraries_use_ieeefp_emulation_libs:    false
**     libraries_use_eh_enabled_libs:          false
**     system_heap:                            L1
**     system_heap_min_size:                   2K
**     system_stack:                           L1
**     system_stack_min_size:                  8K
**     use_sdram:                              true
**     use_sdram_size:                         32M
**     use_sdram_partitioned:                  custom
**
*/

ARCHITECTURE(ADSP-BF548)

SEARCH_DIR($ADI_DSP/Blackfin/lib)


// Workarounds are enabled, exceptions are disabled.
#define RT_LIB_NAME(x) lib ## x ## y.dlb
#define RT_LIB_NAME_EH(x) lib ## x ## y.dlb
#define RT_LIB_NAME_MT(x) lib ## x ## y.dlb
#define RT_LIB_NAME_EH_MT(x) lib ## x ## y.dlb
#define RT_OBJ_NAME(x) x ## y.doj
#define RT_OBJ_NAME_MT(x) x ## mty.doj


$LIBRARIES = 

/*$VDSG<insert-user-libraries-at-beginning>                     */
/* Text inserted between these $VDSG comments will be preserved */
#ifdef _RUN_THESE_TESTS_
   RT_LIB_NAME_MT(fss548),
   RT_LIB_NAME_MT(ssl548),
   RT_LIB_NAME_MT(drv548),
#endif
/*$VDSG<insert-user-libraries-at-beginning>                     */

   RT_LIB_NAME_MT(small532)
   ,RT_LIB_NAME_MT(io532)
   ,RT_LIB_NAME_MT(c532)
   ,RT_LIB_NAME_MT(event532)
   ,RT_LIB_NAME_MT(x532)
   ,RT_LIB_NAME(f64ieee532)
   ,RT_LIB_NAME(dsp532)
   ,RT_LIB_NAME(sftflt532)
   ,RT_LIB_NAME(etsi532)
   ,RT_OBJ_NAME_MT(idle532)
   ,RT_LIB_NAME(ssl548)
   ,RT_LIB_NAME(drv548)
   ,RT_LIB_NAME(usb548)
   ,RT_LIB_NAME_MT(rt_fileio532)

/*$VDSG<insert-user-libraries-at-end>                           */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-at-end>                           */

   ;

$OBJECTS = 
   ".\Debug\Power_On_Self_Test_basiccrt.doj"

/*$VDSG<insert-user-objects-at-beginning>                       */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-objects-at-beginning>                       */

   , RT_LIB_NAME(profile532)
   , $COMMAND_LINE_OBJECTS
   , "cplbtab548.doj"

/*$VDSG<insert-user-objects-at-end>                             */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-objects-at-end>                             */

   ;

$OBJS_LIBS_INTERNAL = 

/*$VDSG<insert-libraries-internal>                              */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-internal>                              */

   $OBJECTS{prefersMem("internal")}, $LIBRARIES{prefersMem("internal")}

/*$VDSG<insert-libraries-internal-end>                          */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-internal-end>                          */

   ;

$OBJS_LIBS_NOT_EXTERNAL = 

/*$VDSG<insert-libraries-not-external>                          */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-not-external>                          */

   $OBJECTS{!prefersMem("external")}, $LIBRARIES{!prefersMem("external")}

/*$VDSG<insert-libraries-not-external-end>                      */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-not-external-end>                      */

   ;


/*$VDSG<insert-user-macros>                                     */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-macros>                                     */


/*$VDSG<customise-async-macros>                                 */
/* This code is preserved if the LDF is re-generated.           */


#define ASYNC0_MEMTYPE RAM
#define ASYNC1_MEMTYPE RAM
#define ASYNC2_MEMTYPE RAM
#define ASYNC3_MEMTYPE RAM


/*$VDSG<customise-async-macros>                                 */


MEMORY
{
/*
** ADSP-BF548 MEMORY MAP.
**
** The known memory spaces are as follows:
**
** 0xFFE00000 - 0xFFFFFFFF  Core MMR registers (2MB)
** 0xFFC00000 - 0xFFDFFFFF  System MMR registers (2MB)
** 0xFFB01000 - 0xFFBFFFFF  Reserved
** 0xFFB00000 - 0xFFB00FFF  Scratch SRAM (4K)
** 0XFFA24000 - 0XFFAFFFFF  Reserved
** 0xFFA14000 - 0xFFA23FFF  L1 INSTRUCTION BANK B ROM (64K)
** 0xFFA10000 - 0XFFA13FFF  Code SRAM/CACHE (16K)
** 0xFFA0C000 - 0xFFA0FFFF  Reserved
** 0xFFA08000 - 0xFFA0BFFF  Instruction Bank B SRAM (16K)
** 0xFFA00000 - 0xFFA07FFF  Instruction Bank A SRAM (32K)
** 0xFF908000 - 0xFF9FFFFF  Reserved
** 0xFF904000 - 0xFF907FFF  Data Bank B SRAM/CACHE (16K)
** 0xFF900000 - 0XFF903FFF  Data Bank B SRAM (16K)
** 0xFF808000 - 0xFF8FFFFF  Reserved
** 0xFF804000 - 0xFF807FFF  Data Bank A SRAM/CACHE (16K)
** 0xFF800000 - 0XFF803FFF  Data Bank A SRAM (16K)
** 0xFEB20000 - 0xFF7FFFFF  Reserved
** 0xFEB00000 - 0xFEB1FFFF  L2 SRAM (128K)
** 0xEF001000 - 0xFEAFFFFF  Reserved
** 0xEF000000 - 0xFF8007FF  Boot ROM (2K)
** 0x30000000 - 0xEEFFFFFF  Reserved
** 0x2C000000 - 0x2FFFFFFF  ASYNC MEMORY BANK 3 (64MB)
** 0x28000000 - 0x2BFFFFFF  ASYNC MEMORY BANK 2 (64MB)
** 0x24000000 - 0x27FFFFFF  ASYNC MEMORY BANK 1 (64MB)
** 0x20000000 - 0x23FFFFFF  ASYNC MEMORY BANK 0 (64MB)
**            - 0x1FFFFFFF  DDR1 MEM Bank 1 MEMORY (8MB - 256MB)
** 0x00000000               DDR1 MEM Bank 0 MEMORY (8MB - 256MB)
**
** Notes:
** 0xFF807FEF-0xFF807FFF
**   Required by boot-loader. Used as heap or cache below which is ok. Cannot
**   contain initialized data or code.
*/

   MEM_SYS_MMRS            { TYPE(RAM) START(0xFFC00000) END(0xFFDFFFFF) WIDTH(8) }
   MEM_L1_SCRATCH          { TYPE(RAM) START(0xFFB00000) END(0xFFB00FFF) WIDTH(8) }
   MEM_L1_CODE_CACHE       { TYPE(RAM) START(0xFFA10000) END(0xFFA13FFF) WIDTH(8) }
   MEM_L1_CODE             { TYPE(RAM) START(0xFFA00000) END(0xFFA0BFFF) WIDTH(8) }
   MEM_L1_DATA_B           { TYPE(RAM) START(0xFF900000) END(0xFF907FFF) WIDTH(8) }
   MEM_L1_DATA_A           { TYPE(RAM) START(0xFF800000) END(0xFF807FFF) WIDTH(8) }
   MEM_L2_SRAM             { TYPE(RAM) START(0xFEB00000) END(0xFEB1FFFF) WIDTH(8) }
   MEM_ASYNC3              { TYPE(ASYNC3_MEMTYPE) START(0x2C000000) END(0x2FFFFFFF) WIDTH(8) }
   MEM_ASYNC2              { TYPE(ASYNC2_MEMTYPE) START(0x28000000) END(0x2BFFFFFF) WIDTH(8) }
   MEM_ASYNC1              { TYPE(ASYNC1_MEMTYPE) START(0x24000000) END(0x27FFFFFF) WIDTH(8) }
   MEM_ASYNC0              { TYPE(ASYNC0_MEMTYPE) START(0x20000000) END(0x23FFFFFF) WIDTH(8) }
   
   /*$VDSG<customise-sdram-mem-partition>                       */
   /* This code is preserved if the LDF is re-generated.        */
   
   MEM_SDRAM0_BANK0        { TYPE(RAM) START(0x00000004) END(0x0005ffff) WIDTH(8) }
   MEM_FPGA_IMAGE          { TYPE(RAM) START(0x00060000) END(0x007fffff) WIDTH(8) }
   MEM_SDRAM0_BANK1        { TYPE(RAM) START(0x00800000) END(0x00ffffff) WIDTH(8) } 
   MEM_SDRAM0_BANK2        { TYPE(RAM) START(0x01000000) END(0x017fffff) WIDTH(8) } 
   MEM_SDRAM0_BANK3        { TYPE(RAM) START(0x01800000) END(0x01ffffff) WIDTH(8) } 
   /*$VDSG<customise-sdram-mem-partition>                       */
   
   
   /*$VDSG<insert-new-memory-segments>                          */
   /* Text inserted between these $VDSG comments will be preserved */
   /*$VDSG<insert-new-memory-segments>                          */
   
} /* MEMORY */

PROCESSOR p0
{
   OUTPUT($COMMAND_LINE_OUTPUT_FILE)
   RESOLVE(start, 0xFFA00000)
   KEEP(start, _main)
   
   /*$VDSG<insert-user-ldf-commands>                            */
   /* Text inserted between these $VDSG comments will be preserved */
   /*$VDSG<insert-user-ldf-commands>                            */
   
   SECTIONS
   {
      
      /*$VDSG<insert-new-sections-at-the-start>                 */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-at-the-start>                 */
      
      scratchpad
      {
         INPUT_SECTION_ALIGN(4)
         
         /*$VDSG<insert-input-sections-at-the-start-of-scratchpad>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-scratchpad>  */
         
         
         /*$VDSG<insert-input-sections-at-the-end-of-scratchpad>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-scratchpad>  */
         
      } > MEM_L1_SCRATCH

      L1_code
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS(L1_code) $LIBRARIES(L1_code))
         
         /*$VDSG<insert-input-sections-at-the-start-of-l1_code>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-l1_code>  */
         
         INPUT_SECTIONS($OBJECTS(cplb_code) $LIBRARIES(cplb_code))
         INPUT_SECTIONS($OBJECTS(cplb) $LIBRARIES(cplb))
         INPUT_SECTIONS($OBJECTS(noncache_code) $LIBRARIES(noncache_code))
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL(program))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL(program))
         INPUT_SECTIONS($OBJECTS(program) $LIBRARIES(program))
         
         /*$VDSG<insert-input-sections-at-the-end-of-l1_code>   */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-l1_code>   */
         
      } > MEM_L1_CODE

      L1_code_cache
      {
         INPUT_SECTION_ALIGN(4)
         ___l1_code_cache = 0;
         INPUT_SECTIONS($OBJECTS(L1_code) $LIBRARIES(L1_code))
         
         /*$VDSG<insert-input-sections-at-the-start-of-l1_code_cache>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-l1_code_cache>  */
         
         INPUT_SECTIONS($OBJECTS(cplb_code) $LIBRARIES(cplb_code))
         INPUT_SECTIONS($OBJECTS(cplb) $LIBRARIES(cplb))
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL(program))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL(program))
         INPUT_SECTIONS($OBJECTS(program) $LIBRARIES(program))
         
         /*$VDSG<insert-input-sections-at-the-end-of-l1_code_cache>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-l1_code_cache>  */
         
      } > MEM_L1_CODE_CACHE

      L1_data_a
      {
         INPUT_SECTION_ALIGN(4)
         FORCE_CONTIGUITY
         ___l1_data_cache_a = 0;
         INPUT_SECTIONS($OBJECTS(L1_data_a) $LIBRARIES(L1_data_a))
         INPUT_SECTIONS($OBJECTS(L1_data) $LIBRARIES(L1_data))
         
         /*$VDSG<insert-input-sections-at-the-start-of-L1_data_a>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-L1_data_a>  */
         
         RESERVE(heaps_and_stack_in_L1_data_a, heaps_and_stack_in_L1_data_a_length = 8K,4)
         INPUT_SECTIONS($OBJECTS(.frt) $LIBRARIES(.frt))
         INPUT_SECTIONS($OBJECTS(.rtti) $LIBRARIES(.rtti))
         INPUT_SECTIONS($OBJECTS(.gdt) $LIBRARIES(.gdt))
         INPUT_SECTIONS($OBJECTS(.gdtl) $LIBRARIES(.gdtl))
         INPUT_SECTIONS($OBJECTS(.edt) $LIBRARIES(.edt))
         INPUT_SECTIONS($OBJECTS(.cht) $LIBRARIES(.cht))
         INPUT_SECTIONS($OBJECTS(cplb_data) $LIBRARIES(cplb_data))
         INPUT_SECTIONS($OBJECTS(voldata) $LIBRARIES(voldata))
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL(data1))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL(data1))
         INPUT_SECTIONS($OBJECTS(data1) $LIBRARIES(data1))
         INPUT_SECTIONS($OBJECTS(constdata) $LIBRARIES(constdata))
         
         /*$VDSG<insert-input-sections-at-the-end-of-L1_data_a>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-L1_data_a>  */
         
      } > MEM_L1_DATA_A

      bsz_L1_data_a ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL(bsz))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL(bsz))
         INPUT_SECTIONS($OBJECTS(bsz) $LIBRARIES(bsz))
      } > MEM_L1_DATA_A

      L1_data_a_stack_heap
      {
         INPUT_SECTION_ALIGN(4)
         RESERVE_EXPAND(heaps_and_stack_in_L1_data_a, heaps_and_stack_in_L1_data_a_length , 0, 4)
         ldf_stack_space = heaps_and_stack_in_L1_data_a;
         ldf_stack_end = (ldf_stack_space + (((heaps_and_stack_in_L1_data_a_length * 8K) / 8K) - 4)) & 0xfffffffc;
      } > MEM_L1_DATA_A

      L1_data_b
      {
         INPUT_SECTION_ALIGN(4)
         ___l1_data_cache_b = 0;
         INPUT_SECTIONS($OBJECTS(L1_data_b) $LIBRARIES(L1_data_b))
         INPUT_SECTIONS($OBJECTS(L1_data) $LIBRARIES(L1_data))
         
         /*$VDSG<insert-input-sections-at-the-start-of-L1_data_b>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-L1_data_b>  */
         
         RESERVE(heaps_and_stack_in_L1_data_b, heaps_and_stack_in_L1_data_b_length = 2K,4)
         INPUT_SECTIONS($OBJECTS(cplb_data) $LIBRARIES(cplb_data))
         INPUT_SECTIONS($OBJECTS(voldata) $LIBRARIES(voldata))
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL(data1))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL(data1))
         INPUT_SECTIONS($OBJECTS(data1) $LIBRARIES(data1))
         INPUT_SECTIONS($OBJECTS(constdata) $LIBRARIES(constdata))
         INPUT_SECTIONS($OBJECTS(.edt) $LIBRARIES(.edt) )
         INPUT_SECTIONS($OBJECTS(.cht) $LIBRARIES(.cht) )
         
         /*$VDSG<insert-input-sections-at-the-end-of-L1_data_b>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-L1_data_b>  */
         
      } > MEM_L1_DATA_B

      bsz_L1_data_b ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS(L1_bsz) $LIBRARIES(L1_bsz))
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL(bsz))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL(bsz))
         INPUT_SECTIONS($OBJECTS(bsz) $LIBRARIES(bsz))
      } > MEM_L1_DATA_B

      L1_data_b_stack_heap
      {
         INPUT_SECTION_ALIGN(4)
         RESERVE_EXPAND(heaps_and_stack_in_L1_data_b, heaps_and_stack_in_L1_data_b_length , 0, 4)
         ldf_heap_space = heaps_and_stack_in_L1_data_b;
         ldf_heap_end = (ldf_heap_space + (((heaps_and_stack_in_L1_data_b_length * 2K) / 2K) - 4)) & 0xfffffffc;
         ldf_heap_length = ldf_heap_end - ldf_heap_space;
      } > MEM_L1_DATA_B

      L2_sram
      {
         INPUT_SECTION_ALIGN(4)
         FORCE_CONTIGUITY
         INPUT_SECTIONS($OBJECTS(L2_sram) $LIBRARIES(L2_sram))
         
         /*$VDSG<insert-input-sections-at-the-start-of-L2_sram>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-L2_sram>  */
         
         INPUT_SECTIONS($OBJECTS(cplb) $LIBRARIES(cplb))
         INPUT_SECTIONS($OBJECTS(cplb_code) $LIBRARIES(cplb_code))
         INPUT_SECTIONS($OBJECTS(cplb_data) $LIBRARIES(cplb_data))
         INPUT_SECTIONS($OBJECTS(noncache_code) $LIBRARIES(noncache_code))
         INPUT_SECTIONS($OBJECTS(program) $LIBRARIES(program))
         INPUT_SECTIONS($OBJECTS(data1) $LIBRARIES(data1))
         INPUT_SECTIONS($OBJECTS(constdata) $LIBRARIES(constdata))
         INPUT_SECTIONS($OBJECTS(voldata) $LIBRARIES(voldata))
         
         /*$VDSG<insert-input-sections-at-the-end-of-L2_sram>   */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-L2_sram>   */
         
      } > MEM_L2_SRAM

      L2_bsz ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($LIBRARIES(bsz))
      } > MEM_L2_SRAM

      L2_eh_rtti
      {
         INPUT_SECTION_ALIGN(4)
         FORCE_CONTIGUITY
         INPUT_SECTIONS($OBJECTS(ctor)  $LIBRARIES(ctor))
         INPUT_SECTIONS($OBJECTS(vtbl)  $LIBRARIES(vtbl))
         INPUT_SECTIONS($OBJECTS(.gdt)  $LIBRARIES(.gdt))
         INPUT_SECTIONS($OBJECTS(.gdtl) $LIBRARIES(.gdtl))
         INPUT_SECTIONS($OBJECTS(.frt)  $LIBRARIES(.frt))
         INPUT_SECTIONS($OBJECTS(.edt)  $LIBRARIES(.edt))
         INPUT_SECTIONS($OBJECTS(.cht)  $LIBRARIES(.cht))
         INPUT_SECTIONS($OBJECTS(.rtti) $LIBRARIES(.rtti))
      } > MEM_L2_SRAM

      L2_stack_heap
      {
         INPUT_SECTION_ALIGN(4)
      } > MEM_L2_SRAM

      
      /*$VDSG<customise-sdram-section-partition>                */
      /* This code is preserved if the LDF is re-generated.     */
      
      sdram0_bank0
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS(program) $LIBRARIES(program))
         INPUT_SECTIONS($OBJECTS(sdram0) $LIBRARIES(sdram0))
      } > MEM_SDRAM0_BANK0

      fpga
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS( $OBJECTS(fpga) $LIBRARIES(fpga))
      } > MEM_FPGA_IMAGE
      
      sdram0_bank1
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS(sdram0) $LIBRARIES(sdram0))
         INPUT_SECTIONS($OBJECTS(sdram0_bank1) $LIBRARIES(sdram0_bank1))
         INPUT_SECTIONS($OBJECTS(sdram0_data) $LIBRARIES(sdram0_data))
         INPUT_SECTIONS( $OBJECTS(RGB_Frame0) $LIBRARIES(RGB_Frame0))
         INPUT_SECTIONS( $OBJECTS(RGB_Frame1) $LIBRARIES(RGB_Frame1))
         INPUT_SECTIONS( $OBJECTS(RGB_Frame2) $LIBRARIES(RGB_Frame2))
         INPUT_SECTIONS($OBJECTS(cplb) $LIBRARIES(cplb))
         INPUT_SECTIONS($OBJECTS(data1) $LIBRARIES(data1))
         INPUT_SECTIONS($OBJECTS(voldata) $LIBRARIES(voldata))
         INPUT_SECTIONS($OBJECTS(constdata) $LIBRARIES(constdata))
         INPUT_SECTIONS($OBJECTS(cplb_data) $LIBRARIES(cplb_data))
         INPUT_SECTIONS($OBJECTS(.edt) $LIBRARIES(.edt))
         INPUT_SECTIONS($OBJECTS(.cht) $LIBRARIES(.cht))
      } > MEM_SDRAM0_BANK1

      sdram0_bank1_bsz ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS(sdram_bsz) $LIBRARIES(sdram_bsz))
         INPUT_SECTIONS($OBJECTS(bsz) $LIBRARIES(bsz))
      } > MEM_SDRAM0_BANK1

      sdram0_bank1_stack_heap
      {
         INPUT_SECTION_ALIGN(4)
      } > MEM_SDRAM0_BANK1

      sdram0_bank2
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS(sdram0) $LIBRARIES(sdram0))
         INPUT_SECTIONS($OBJECTS(sdram0_bank2) $LIBRARIES(sdram0_bank2))
         INPUT_SECTIONS( $OBJECTS(RGB_Frame3) $LIBRARIES(RGB_Frame3))
         INPUT_SECTIONS( $OBJECTS(RGB_Frame4) $LIBRARIES(RGB_Frame4))
         INPUT_SECTIONS($OBJECTS(sdram0_data) $LIBRARIES(sdram0_data))
         INPUT_SECTIONS($OBJECTS(cplb) $LIBRARIES(cplb))
         INPUT_SECTIONS($OBJECTS(data1) $LIBRARIES(data1))
         INPUT_SECTIONS($OBJECTS(voldata) $LIBRARIES(voldata))
         INPUT_SECTIONS($OBJECTS(constdata) $LIBRARIES(constdata))
         INPUT_SECTIONS($OBJECTS(cplb_data) $LIBRARIES(cplb_data))
         INPUT_SECTIONS($OBJECTS(.edt) $LIBRARIES(.edt))
         INPUT_SECTIONS($OBJECTS(.cht) $LIBRARIES(.cht))
      } > MEM_SDRAM0_BANK2

      sdram0_bank2_bsz ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS(sdram_bsz) $LIBRARIES(sdram_bsz))
         INPUT_SECTIONS($OBJECTS(bsz) $LIBRARIES(bsz))
      } > MEM_SDRAM0_BANK2

      sdram0_bank3
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS(sdram0) $LIBRARIES(sdram0))
         INPUT_SECTIONS($OBJECTS(sdram0_bank3) $LIBRARIES(sdram0_bank3))
         INPUT_SECTIONS($OBJECTS(noncache_code) $LIBRARIES(noncache_code))
         INPUT_SECTIONS($OBJECTS(program) $LIBRARIES(program))
         INPUT_SECTIONS($OBJECTS(cplb_code) $LIBRARIES(cplb_code))
      } > MEM_SDRAM0_BANK3

      /*$VDSG<customise-sdram-section-partition>                */
      
      
      /*$VDSG<insert-new-sections-at-the-end>                   */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-at-the-end>                   */
      
   } /* SECTIONS */
} /* p0 */

